# Nginx configuration optimized for offline Cockpit frontend

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Cache settings for static assets
    map $sent_http_content_type $expires {
        default                    off;
        text/html                  1d;
        text/css                   1y;
        application/javascript     1y;
        ~image/                    1y;
        font/woff                  1y;
        font/woff2                 1y;
        application/font-woff      1y;
        application/font-woff2     1y;
    }

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index container-ready.html index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: blob:; font-src 'self' data:;" always;

        # Enable expires
        expires $expires;

        # Main application routes
        location / {
            try_files $uri $uri/ /container-ready.html;
            
            # Cache static assets aggressively
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, no-transform, immutable";
                add_header Vary "Accept-Encoding";
            }
        }

        # Static assets with long cache
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, no-transform, immutable";
            add_header Vary "Accept-Encoding";
        }

        # FontAwesome assets
        location /static/webfonts/ {
            expires 1y;
            add_header Cache-Control "public, no-transform, immutable";
            add_header Access-Control-Allow-Origin "*";
        }

        # JavaScript modules
        location /js/ {
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
        }

        # Service Worker (no cache)
        location = /service-worker.js {
            expires off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # API proxy (if backend is on same container)
        location /api/ {
            # Try to proxy to backend service
            proxy_pass http://localhost:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # If backend is down, return 503 with offline message
            error_page 502 503 504 = @offline_api;
        }

        # Offline API fallback
        location @offline_api {
            default_type application/json;
            return 503 '{"error": "API temporarily unavailable", "offline": true, "message": "Backend service is not accessible. Using cached/fallback data."}';
        }

        # Status endpoint
        location = /status {
            alias /usr/share/nginx/html/status.json;
            add_header Content-Type application/json;
            expires off;
        }

        # Health check endpoint
        location = /health {
            default_type application/json;
            return 200 '{"status": "healthy", "container": "cockpit-frontend", "offline_ready": true}';
        }

        # Container info endpoint
        location = /container-info {
            default_type application/json;
            return 200 '{"container_mode": true, "nginx_version": "$nginx_version", "hostname": "$hostname"}';
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }

        # Deny access to backup files
        location ~ ~$ {
            deny all;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}

# Optional: Additional server block for HTTPS (if certificates are provided)
# server {
#     listen 443 ssl http2;
#     server_name _;
#     
#     ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
#     ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
#     
#     # SSL settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # Include the same location blocks as HTTP server
# }
