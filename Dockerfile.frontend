# Multi-stage build for frontend (Offline-ready)
FROM node:18-alpine AS builder

# Set work directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build the application (this will use the locally installed vite)
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine

# Install curl for healthcheck
RUN apk add --no-cache curl

# Copy built assets from builder stage (production directory for offline setup)
COPY --from=builder /app/production /usr/share/nginx/html

# Copy custom Nginx configuration for offline mode
COPY docker/nginx-offline.conf /etc/nginx/nginx.conf

# Create startup script for environment variable injection
COPY docker/startup.sh /startup.sh
RUN chmod +x /startup.sh

# Create non-root user
RUN addgroup -g 1000 -S appuser \
    && adduser -u 1000 -S appuser -G appuser

# Set permissions
RUN chown -R appuser:appuser /usr/share/nginx/html \
    && chown -R appuser:appuser /var/cache/nginx \
    && chown -R appuser:appuser /var/log/nginx \
    && chown -R appuser:appuser /etc/nginx \
    && touch /var/run/nginx.pid \
    && chown -R appuser:appuser /var/run/nginx.pid \
    && chown appuser:appuser /startup.sh

# Set environment variables for offline container mode
ENV COCKPIT_CONTAINER_MODE=true
ENV COCKPIT_DEBUG=false
ENV COCKPIT_API_URL=""
ENV NGINX_WORKER_PROCESSES=auto
ENV NGINX_WORKER_CONNECTIONS=1024

# Switch to non-root user
USER appuser

# Health check for offline mode
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/container-ready.html || curl -f http://localhost/ || exit 1

# Expose port 80
EXPOSE 80

# Start with environment variable injection
CMD ["/startup.sh"]
